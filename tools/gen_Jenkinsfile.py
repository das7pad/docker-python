"""Generate the declarative Jenkins pipeline"""

__author__ = 'Jakob Ackermann <das7pad@outlook.com>'

import collections
import pathlib


DEFAULT_VARIANT = 'stretch'

VERSIONS_BY_VARIANT = {
    'stretch': [
        '2.7.16',

        '3.5.3',
        '3.5.4',
        '3.5.5',
        '3.5.6',

        '3.6.0',
        '3.6.1',
        '3.6.2',
        '3.6.3',
        '3.6.4',
        '3.6.5',
        '3.6.6',
        '3.6.7',
        '3.6.8',

        '3.7.0',
        '3.7.1',
        '3.7.2',
        '3.7.3',
    ],
}


def indent(size: int, content: str):
    actual_indent = ' ' * size * 2
    return '\n'.join(
        ('' if line.startswith('%(') else actual_indent)
        + line
        for line in content.strip('\n').replace('    ', '  ').splitlines()
    )


PIPELINE = indent(0, """
//
// This file is autogenerated.
// To update, run:
//
//    make Jenkinsfile
//

pipeline {
    agent none
    environment {
        HOME = '/tmp/'
    }
    options {
        timestamps()
    }
    stages {
        stage('Prepare Build') {
            agent any
            steps {
                dir('official-images') {
                    git url: 'https://github.com/docker-library/official-images'
                }
                stash includes: 'official-images/**', name: 'official-images'
            }
        }
        stage('Build Stage') {
            parallel {
%(stages)s
            }
        }
    }
}
""")


STAGE = indent(4, """
stage('%(tag)s') {
    agent {
        label 'docker_builder_python'
    }
    environment {
        IMAGE_TAG = "%(tag)s-$BRANCH_NAME-$BUILD_NUMBER"
        IMAGE = "python:$IMAGE_TAG"
    }
    stages {
        stage('%(tag)s Pull Cache') {
            steps {
                sh '''docker pull $DOCKER_REGISTRY/python:%(tag)s \\
                    && docker tag \\
                        $DOCKER_REGISTRY/python:%(tag)s \\
                        $IMAGE-cache \\
                    && docker rmi $DOCKER_REGISTRY/python:%(tag)s \\
                    || true
                '''
            }
        }
        stage('%(tag)s Build') {
            steps {
                retry(10) {
                    sh '''docker build --tag $IMAGE \\
                            --build-arg PYTHON_VERSION=%(version)s \\
                            --cache-from $IMAGE-cache \\
                            --file %(major_minor)s/%(path)s/Dockerfile \\
                            .
                    '''
                }
            }
        }
        stage('%(tag)s Test') {
            steps {
                unstash 'official-images'
                sh 'official-images/test/run.sh $IMAGE'
            }
        }
        stage('%(tag)s Push') {
            steps {
                sh '''
%(tags)s
                '''
            }
        }
    }
    post {
        cleanup {
            sh '''docker rmi \\
                $IMAGE \\
                $IMAGE-cache \\
%(rmi_tags)s
                --force
            '''
            sh 'make clean'
        }
    }
}
""")

TAGS = indent(9, """
&& docker tag $IMAGE $DOCKER_REGISTRY/python:%(tag)s \\
&& docker push $DOCKER_REGISTRY/python:%(tag)s \\
""")

RMI_TAG = indent(8, """
$DOCKER_REGISTRY/python:%(tag)s \\
""")


def main():
    jenkinsfile = pathlib.Path(__file__).parent.parent / 'Jenkinsfile'

    stages = []
    for variant, VERSIONS in VERSIONS_BY_VARIANT.items():
        tags = {}
        for version in VERSIONS:
            major_minor, patch = version.rsplit('.', 1)
            major, minor = major_minor.split('.')
            tags[version] = version
            tags[major_minor] = version
            tags[major] = version
            tags['latest'] = version

        tags_by_version = collections.defaultdict(list)
        for tag, version in tags.items():
            tags_by_version[version].append(tag)

        for version, tags_shared in sorted(tags_by_version.items()):
            tags = set()
            is_latest = 'latest' in tags_shared
            if is_latest:
                tags.add(variant)

                # latest-stretch is not a simple tag
                tags_shared.remove('latest')

            if DEFAULT_VARIANT in variant:
                stripped = variant.replace(DEFAULT_VARIANT, '').strip('-')

                if is_latest:
                    tags.add(stripped or 'latest')

                if stripped:
                    tags.update('%s-%s' % (tag, stripped) for tag in tags_shared)
                else:
                    tags.update(tags_shared)

            tags.update('%s-%s' % (tag, variant) for tag in tags_shared)

            tags = sorted(tags)
            stages.append(
                STAGE % dict(
                    version=version,
                    major_minor=version.rsplit('.', 1)[0],
                    path=variant.replace('-', '/'),
                    tag='%s-%s' % (version, variant),
                    rmi_tags='\n'.join(
                        RMI_TAG % dict(tag=tag)
                        for tag in tags
                    ),
                    tags='\n'.join(
                        TAGS % dict(tag=tag)
                        for tag in tags
                    ).replace('&& ', '   ', 1).rstrip(' \\'),
                )
            )

    pipeline = PIPELINE % dict(stages='\n'.join(stages))
    jenkinsfile.write_text(pipeline + '\n')


if __name__ == '__main__':
    main()
